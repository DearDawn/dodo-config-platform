import styles from './index.module.css';
import React, {
  useCallback,
  useEffect,
  useMemo,
  useRef,
  useState,
} from 'react';
import { InferGetStaticPropsType, Metadata } from 'next';
import { Button } from '@/components/button';
import Head from 'next/head';
import { API } from '@/api/config';
import { NavItem } from '@/components/navItem';
import Editor, { OnValidate } from '@monaco-editor/react';
import { T_ITEM_INIT_CONFIG } from '@/types/api';
import { Tabs } from '@/components/tabs';
import { Info } from './components/info';
import { Log } from './components/log';
import { Preview } from './components/preview';
import { waitTime } from '@/utils/common';

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

export default function Home(
  props: InferGetStaticPropsType<typeof getStaticProps>
) {
  console.log('[dodo] ', 'props', props);
  const { data } = props;
  const [list, setList] = useState(data.list || []);
  const [current, setCurrent] = useState(list[0]?.name || '');
  const [content, setContent] = useState('');
  const [currentConfig, setCurrentConfig] = useState<T_ITEM_INIT_CONFIG>();
  const [err, setErr] = useState(false);
  const editor = useRef(null);

  const handleRefreshList = async () => {
    const info = await API.fetchList();
    setList(info.list || []);
  };

  const handleRefreshConfig = useCallback(async () => {
    await waitTime(3000);
    API.fetchOne({ name: current }).then((res) => {
      setContent(JSON.stringify(JSON.parse(res.content), undefined, 2));
      setCurrentConfig(res);
    });
  }, [current]);

  const handleCreate = async () => {
    const defaultName = String(Math.floor(Math.random() * 100));
    const name = window.prompt('输入配置名称', defaultName) || '';

    const res = await API.createOne({ name });
    await handleRefreshList();
    setCurrent(res.name);
  };

  const handleCopy = async () => {
    const defaultName = `${current}_copy`;
    const name = window.prompt('输入配置名称', defaultName) || '';

    const res = await API.createOne({ name, content });
    await handleRefreshList();
    setCurrent(res.name);
  };

  const handleSave = async () => {
    if (err) {
      console.log('[dodo] 有错误');
      return;
    }

    const res = await API.updateOne({
      name: current,
      content,
    });

    await handleRefreshList();
    await handleRefreshConfig();
  };

  const handleDelete = async () => {
    const confirm = window.confirm(`确认要删除[ ${current} ]吗?`);
    if (!confirm) return;

    await API.deleteOne({ name: current });
    await handleRefreshList();
    setCurrent('');
  };

  const handleValidate: OnValidate = (info) => {
    console.log('[dodo] ', 'info', info);
    setErr(info.length > 0);
  };

  const handleContentChange = (text = '') => {
    console.log('[dodo] ', 'text', text);
    setContent(text);
  };

  const handleItemClick = (name = '') => {
    console.log('[dodo] ', 'name', name);
    setCurrent(name);
  };

  const handleRollback = async (version = 0) => {
    const confirm = window.confirm(
      `确认要回滚[ ${current} ]至版本[ ${version} ]吗?`
    );
    if (!confirm) return;
    const res = await API.rollback({ name: current, version });
    handleRefreshConfig();
  };

  // useEffect(() => {
  //   console.log('[dodo] ', 'refresh', current);
  //   if (!current) {
  //     setContent('');
  //     return;
  //   }

  //   handleRefreshConfig();
  // }, [current, handleRefreshConfig]);

  console.log('[dodo] ', 'render', 222);

  useEffect(() => {
    console.log('[dodo] ', '67889999', 67889999);
  }, []);

  return (
    <main className={styles.main}>
      <Head>
        <title>呆呆的JSON配置平台</title>
      </Head>
      <header className={styles.header}>
        呆呆的 <code>JSON</code> 配置平台
      </header>
      <nav className={styles.optionBar}>
        <Button onClick={handleCreate}>新建</Button>
        <Button onClick={handleSave}>保存</Button>
        <Button onClick={handleCopy}>复制</Button>
        <Button onClick={handleDelete}>删除</Button>
      </nav>
      <section className={styles.content}>
        <aside className={styles.aside}>
          {list.map((it) => (
            <NavItem
              active={it.name === current}
              name={it.name}
              key={it.name}
              onClick={handleItemClick}
            />
          ))}
        </aside>
        <section className={styles.editor}>
          <Editor
            options={{ automaticLayout: true }}
            defaultLanguage='json'
            value={content}
            onChange={handleContentChange}
            onValidate={handleValidate}
          />
        </section>
        <section className={styles.info}>
          <Tabs.Tab
            keyList={[
              { label: '配置信息', key: 'info' },
              { label: '日志模块', key: 'log' },
              { label: '预览模块', key: 'preview' },
            ]}
            active='info'
            onClick={console.log}
          >
            <Tabs.Box tabKey='info'>
              <Info info={currentConfig} onRollback={handleRollback} />
            </Tabs.Box>
            <Tabs.Box tabKey='log'>
              <Log info={currentConfig} />
            </Tabs.Box>
            <Tabs.Box tabKey='preview'>
              <Preview configKey={current} />
            </Tabs.Box>
          </Tabs.Tab>
        </section>
      </section>
      <footer className={styles.footer}>footer</footer>
    </main>
  );
}

export async function getStaticProps() {
  const data = await API.fetchList();

  if (!data) {
    return {
      notFound: true,
    };
  }

  return {
    props: { data },
  };
}
